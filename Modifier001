//SPDX-License-Identifier: MIT
pragma solidity 0.8.7;

contract greatestnumm {
    uint256 a;
    uint256 b;
    uint256 c;
    uint256 d;
    address owner;
    string day; uint256 i;
    string[] weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"];
    
    constructor(){
        owner = msg.sender;
    }
    modifier onlyOwner {
        require (owner == msg.sender, "only owner can access");
        _;
    }
    modifier weekDays{
        bool isValid;
        for (i = 0; i < weekdays.length; i++ ){
            if(keccak256(abi.encode(day)) == keccak256(abi.encode(weekdays[i])))
            { isValid = true;}
            else
            { isValid = false;}
        }
        require (isValid == true, "access is only allowed on working days");
        _;
    }
    function set (uint _a, uint _b, uint _c, uint _d) public onlyOwner weekDays{
        a = _a;  b = _b;  c = _c;  d = _d;
    }
    function get () public view onlyOwner returns (uint) {
        if ( a > b && a > c && a > d)
            { return a; }
        else if ( b > a && b > c && b > d)
            { return b; }
        else if ( c > a && c > b && c > d)
            { return c;}
        else
            { return d;}
    }
}
